''' 
Created on 2012-8-28  

@author:  walfred 
@module: domxml.wXMLbyDom  
@description: 
'''  
import xml.dom.minidom as Dom  

class XMLGenerator:  
    def __init__(self, xml_name):  
        self.doc = Dom.Document()  
        self.xml_name = xml_name  

    def createNode(self, node_name):  
        return self.doc.createElement(node_name)  

    def addNode(self, node, prev_node = None):  
        cur_node = node  
        if prev_node is not None:  
            prev_node.appendChild(cur_node)  
        else:  
            self.doc.appendChild(cur_node)  
        return cur_node  

    def setNodeAttr(self, node, att_name, value):  
        cur_node = node  
        cur_node.setAttribute(att_name, value)  

    def setNodeValue(self, cur_node, value):  
        node_data = self.doc.createTextNode(value)  
        cur_node.appendChild(node_data)  

    def genXml(self):  
        f = open(self.xml_name, "w")  
        f.write(self.doc.toprettyxml(indent = "\t", newl = "\n", encoding = "utf-8"))  
        f.close()  

if __name__ == "__main__":  
    myXMLGenerator = XMLGenerator("conver_report1.xml")  

    #xml root node  
    node_book_store = myXMLGenerator.createNode("Conver")  
    myXMLGenerator.addNode(node = node_book_store)  


    #set 
    node_book_02 = myXMLGenerator.createNode("set")  
    myXMLGenerator.setNodeAttr(node_book_02, "feature","SIM")  
    myXMLGenerator.addNode(node_book_02, node_book_store)  

    #case  
    node_book_01= myXMLGenerator.createNode("case")  
    myXMLGenerator.setNodeAttr(node_book_01, "casename", "SMOKE-SIM-Query_SIM_card_status")  
    myXMLGenerator.setNodeAttr(node_book_01, "description", "testtestetstetstetstetstet")  
    myXMLGenerator.setNodeAttr(node_book_01, "result", "pass")  
    myXMLGenerator.addNode(node_book_01, node_book_store)   

    #gen  
    myXMLGenerator.genXml()
